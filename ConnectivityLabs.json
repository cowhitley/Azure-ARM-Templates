{
	"$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"metadata": {
		"description": "Deploys several Connectivity labs to one Resource Group.",
		"author": "Ryan McCallum",
		"alias": "RYMCCALL",
		"GitHub": "https://github.com/rjmccallumbigl/Azure-ARM-Templates",
		"Enablement": "https://learn.microsoft.com/en-us/troubleshoot/azure/virtual-machines/welcome-virtual-machines",
		"deploymentLink": "https://portal.azure.com/#create/Microsoft.Template/uri/https%3A%2f%2fraw.githubusercontent.com%2frjmccallumbigl%2fAzure-ARM-Templates%2fmain%2fConnectivityLabs.json"
	},
	"parameters": {
		"adminUsername": {
			"type": "String",
			"defaultValue": "azureadmin",
			"maxLength": 20,
			"metadata": {
				"description": "Username for the Virtual Machines."
			}
		},
		"adminPassword": {
			"type": "SecureString",
			"minLength": 12,
			"metadata": {
				"description": "Password for the Virtual Machines."
			}
		},
		"location": {
			"defaultValue": "[resourceGroup().location]",
			"type": "String",
			"metadata": {
				"description": "Location for all resources."
			}
		},
		"vmSize": {
			"defaultValue": "Standard_B2ms",
			"type": "String",
			"metadata": {
				"description": "Default VM Size."
			}
		},
		"storageUri": {
			"defaultValue": "[format('store{0}', uniqueString(resourceGroup().id))]",
			"type": "string",
			"metadata": {
				"description": "Name of storage account For Boot Diagnostics"
			}
		},
		"storageAccountType": {
			"type": "string",
			"defaultValue": "Standard_LRS",
			"metadata": {
				"description": "Storage Account type"
			}
		},
		"yourPublicIP": {
			"type": "string",
			"metadata": {
				"description": "Do a quick search for 'my ip' and enter your IP here. This will be placed in your NSG to allow access to the labs."
			}
		}
	},
	"variables": {
		"nicName": "myVMNic",
		"addressPrefix": "10.0.0.0/16",
		"subnetName": "Subnet",
		"subnetPrefix": "10.0.0.0/24",
		"subnetRef": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('virtualNetworkName'), variables('subnetName'))]",
		"windowsVMName": "WindowsLab",
		"linuxVMName": "LinuxLab",
		"virtualNetworkName": "MyVNET",
		"publicIPAddressName": "myPublicIP",
		"networkSecurityGroupName": "default-NSG",
		"windowsVMCount": 16,
		"windowsGroup1": 3,
		"windowsGroup2": "[sub(variables('windowsVMCount'), add(1, variables('windowsGroup1')))]",
		"linuxVMCount": 7,
		"domainName": "corp.contoso.com",
		"_artifactsLocation": "https://raw.githubusercontent.com/rjmccallumbigl/Azure-ARM-Templates/main",
		"_artifactsLocationSasToken": "",
		"shortDomainName": "[first(split(variables('domainName'),'.'))]",
		"assetLocation": "[concat(variables('_artifactsLocation'),'/DSC')]",
		"templates": "[concat(variables('_artifactsLocation'),'/nested')]",
		"VMs": {
			"adVmName": "[concat(variables('windowsVMName'), '4')]",
			"adConfigurationFunction": {
				"CreateADPDC": "CreateADPDC.ps1\\CreateADPDC"
			}
		},
		"SharedVmConfig": {
			"location": "[resourceGroup().location]",
			"vmSize": "[parameters('vmSize')]",
			"serverOS": "2016-Datacenter",
			"domainUserName": "[concat(variables('shortDomainName'),'\\',parameters('adminUsername'))]",
			"adminUsername": "[parameters('adminUsername')]",
			"adminPassword": "[parameters('adminPassword')]",
			"storageAccountNamePrefix": "[parameters('storageUri')]",
			"sasToken": "[variables('_artifactsLocationSasToken')]",
			"domainName": "[variables('domainName')]"
		},
		"adNicIP": "10.0.0.10"
	},
	"resources": [
		{
			"type": "Microsoft.Network/publicIPAddresses",
			"apiVersion": "2020-08-01",
			"name": "[concat(variables('publicIPAddressName'), copyIndex(1))]",
			"copy": {
				"name": "publicIPcopy",
				"count": "[add(variables('windowsVMCount'),variables('linuxVMCount'))]"
			},
			"location": "[parameters('location')]",
			"properties": {
				"publicIPAllocationMethod": "Dynamic"
			}
		},
		{
			"type": "Microsoft.Network/networkSecurityGroups",
			"apiVersion": "2020-08-01",
			"name": "[variables('networkSecurityGroupName')]",
			"location": "[parameters('location')]",
			"properties": {
				"securityRules": [
					{
						"name": "default-allow-3389",
						"properties": {
							"priority": 1000,
							"access": "Allow",
							"direction": "Inbound",
							"destinationPortRange": "3389",
							"protocol": "Tcp",
							"sourceAddressPrefix": "[parameters('yourPublicIP')]",
							"sourcePortRange": "*",
							"destinationAddressPrefix": "*"
						}
					},
					{
						"name": "default-allow-22",
						"properties": {
							"priority": 1001,
							"access": "Allow",
							"direction": "Inbound",
							"destinationPortRange": "22",
							"protocol": "Tcp",
							"sourceAddressPrefix": "[parameters('yourPublicIP')]",
							"sourcePortRange": "*",
							"destinationAddressPrefix": "*"
						}
					}
				]
			}
		},
		{
			"type": "Microsoft.Network/virtualNetworks",
			"apiVersion": "2020-08-01",
			"name": "[variables('virtualNetworkName')]",
			"location": "[parameters('location')]",
			"dependsOn": [
				"[resourceId('Microsoft.Network/networkSecurityGroups', variables('networkSecurityGroupName'))]"
			],
			"properties": {
				"addressSpace": {
					"addressPrefixes": [
						"[variables('addressPrefix')]"
					]
				},
				"dhcpOptions": {
					"dnsServers": [
						"[variables('adNicIP')]",
						"168.63.129.16"
					]
				},
				"subnets": [
					{
						"name": "[variables('subnetName')]",
						"properties": {
							"addressPrefix": "[variables('subnetPrefix')]",
							"networkSecurityGroup": {
								"id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('networkSecurityGroupName'))]"
							}
						}
					}
				]
			}
		},
		{
			"type": "Microsoft.Network/networkInterfaces",
			"apiVersion": "2020-08-01",
			"name": "[concat(variables('nicName'), copyIndex(1))]",
			"copy": {
				"count": "[variables('windowsGroup1')]",
				"name": "nicCopy1"
			},
			"location": "[parameters('location')]",
			"dependsOn": [
				"publicIPcopy",
				"[variables('virtualNetworkName')]",
				"[resourceId('Microsoft.Network/networkInterfaces', concat(variables('nicName'), '4'))]"
			],
			"properties": {
				"ipConfigurations": [
					{
						"name": "ipconfig1",
						"properties": {
							"privateIPAllocationMethod": "Dynamic",
							"publicIPAddress": {
								"id": "[resourceId('Microsoft.Network/publicIPAddresses',concat(variables('publicIPAddressName'), copyIndex(1)))]"
							},
							"subnet": {
								"id": "[variables('subnetRef')]"
							}
						}
					}
				]
			}
		},
		{
			"type": "Microsoft.Network/networkInterfaces",
			"apiVersion": "2020-08-01",
			"name": "[concat(variables('nicName'), '4')]",
			"location": "[parameters('location')]",
			"dependsOn": [
				"publicIPcopy",
				"[variables('virtualNetworkName')]"
			],
			"properties": {
				"ipConfigurations": [
					{
						"name": "ipconfig1",
						"properties": {
							"privateIPAllocationMethod": "Static",
							"privateIPAddress": "[variables('adNicIP')]",
							"publicIPAddress": {
								"id": "[resourceId('Microsoft.Network/publicIPAddresses',concat(variables('publicIPAddressName'), '4'))]"
							},
							"subnet": {
								"id": "[variables('subnetRef')]"
							}
						}
					}
				]
			}
		},
		{
			"type": "Microsoft.Network/networkInterfaces",
			"apiVersion": "2020-08-01",
			"name": "[concat(variables('nicName'), copyIndex(5))]",
			"copy": {
				"count": "[add(variables('windowsGroup2'),variables('linuxVMCount'))]",
				"name": "nicCopy2"
			},
			"location": "[parameters('location')]",
			"dependsOn": [
				"publicIPcopy",
				"[variables('virtualNetworkName')]",
				"[resourceId('Microsoft.Network/networkInterfaces', concat(variables('nicName'), copyIndex(1)))]"
			],
			"properties": {
				"ipConfigurations": [
					{
						"name": "ipconfig1",
						"properties": {
							"privateIPAllocationMethod": "Dynamic",
							"publicIPAddress": {
								"id": "[resourceId('Microsoft.Network/publicIPAddresses',concat(variables('publicIPAddressName'), copyIndex(5)))]"
							},
							"subnet": {
								"id": "[variables('subnetRef')]"
							}
						}
					}
				]
			}
		},
		{
			"type": "Microsoft.Storage/storageAccounts",
			"apiVersion": "2021-06-01",
			"name": "[parameters('storageUri')]",
			"location": "[parameters('location')]",
			"sku": {
				"name": "[parameters('storageAccountType')]"
			},
			"kind": "StorageV2",
			"properties": {}
		},
		{
			"name": "ADDC",
			"type": "Microsoft.Resources/deployments",
			"apiVersion": "2015-01-01",
			"comments": "This is the deployment resource for the ADDC VM.",
			"dependsOn": [
				"[resourceId('Microsoft.Network/networkInterfaces', concat(variables('nicName'), '4'))]",
				"[resourceId('Microsoft.Storage/storageAccounts', parameters('storageUri'))]"
			],
			"properties": {
				"mode": "Incremental",
				"templateLink": {
					"uri": "[concat(variables('templates'),'/addc.json',variables('_artifactsLocationSasToken'))]",
					"contentVersion": "1.0.0.0"
				},
				"parameters": {
					"SharedVmConfig": {
						"value": "[variables('SharedVmConfig')]"
					},
					"vmName": {
						"value": "[variables('VMs').adVmName]"
					},
					"nicName": {
						"value": "[concat(variables('nicName'), '4')]"
					},
					"modulesURL": {
						"value": "[variables('assetLocation')]"
					},
					"configurationFunction": {
						"value": "[variables('VMs').adConfigurationFunction]"
					}
				}
			}
		},
		{
			"type": "Microsoft.Compute/virtualMachines",
			"name": "[concat(variables('windowsVMName'), copyIndex(1))]",
			"apiVersion": "2020-12-01",
			"copy": {
				"count": "[variables('windowsGroup1')]",
				"name": "windowsVMcopy"
			},
			"location": "[parameters('location')]",
			"dependsOn": [
				"nicCopy1",
				"nicCopy2"
			],
			"properties": {
				"hardwareProfile": {
					"vmSize": "[parameters('vmSize')]"
				},
				"osProfile": {
					"computerName": "[concat(variables('windowsVMName'), copyIndex(1))]",
					"adminUsername": "[parameters('adminUsername')]",
					"adminPassword": "[parameters('adminPassword')]"
				},
				"storageProfile": {
					"imageReference": {
						"publisher": "MicrosoftWindowsServer",
						"offer": "WindowsServer",
						"sku": "2016-Datacenter",
						"version": "latest"
					},
					"osDisk": {
						"createOption": "FromImage",
						"managedDisk": {
							"storageAccountType": "StandardSSD_LRS"
						}
					}
				},
				"networkProfile": {
					"networkInterfaces": [
						{
							"id": "[resourceId('Microsoft.Network/networkInterfaces', concat(variables('nicName'), copyIndex(1)))]"
						}
					]
				},
				"diagnosticsProfile": {
					"bootDiagnostics": {
						"enabled": true,
						"storageUri": "[concat('https://', parameters('storageUri'), '.blob.core.windows.net')]"
					}
				}
			}
		},
		{
			"type": "Microsoft.Compute/virtualMachines",
			"name": "[concat(variables('windowsVMName'), copyIndex(5))]",
			"apiVersion": "2020-12-01",
			"copy": {
				"count": "[variables('windowsGroup2')]",
				"name": "windowsVMcopy2"
			},
			"location": "[parameters('location')]",
			"dependsOn": [
				"nicCopy1",
				"nicCopy2"
			],
			"properties": {
				"hardwareProfile": {
					"vmSize": "[parameters('vmSize')]"
				},
				"osProfile": {
					"computerName": "[concat(variables('windowsVMName'), copyIndex(5))]",
					"adminUsername": "[parameters('adminUsername')]",
					"adminPassword": "[parameters('adminPassword')]"
				},
				"storageProfile": {
					"imageReference": {
						"publisher": "MicrosoftWindowsServer",
						"offer": "WindowsServer",
						"sku": "2019-Datacenter",
						"version": "latest"
					},
					"osDisk": {
						"createOption": "FromImage",
						"managedDisk": {
							"storageAccountType": "StandardSSD_LRS"
						}
					}
				},
				"networkProfile": {
					"networkInterfaces": [
						{
							"id": "[resourceId('Microsoft.Network/networkInterfaces', concat(variables('nicName'), copyIndex(5)))]"
						}
					]
				},
				"diagnosticsProfile": {
					"bootDiagnostics": {
						"enabled": true,
						"storageUri": "[concat('https://', parameters('storageUri'), '.blob.core.windows.net')]"
					}
				}
			}
		},
		{
			"type": "Microsoft.Compute/virtualMachines",
			"apiVersion": "2020-12-01",
			"name": "[concat(variables('linuxVMName'), '1')]",
			"location": "[parameters('location')]",
			"dependsOn": [
				"nicCopy1",
				"nicCopy2"
			],
			"properties": {
				"hardwareProfile": {
					"vmSize": "[parameters('vmSize')]"
				},
				"osProfile": {
					"computerName": "[concat(variables('linuxVMName'), '1')]",
					"adminUsername": "[parameters('adminUsername')]",
					"adminPassword": "[parameters('adminPassword')]"
				},
				"storageProfile": {
					"imageReference": {
						"publisher": "RedHat",
						"offer": "rhel-raw",
						"sku": "8-raw",
						"version": "latest"
					},
					"osDisk": {
						"createOption": "FromImage",
						"managedDisk": {
							"storageAccountType": "StandardSSD_LRS"
						}
					}
				},
				"networkProfile": {
					"networkInterfaces": [
						{
							"id": "[resourceId('Microsoft.Network/networkInterfaces', concat(variables('nicName'), add(variables('windowsVMCount'),1)))]"
						}
					]
				},
				"diagnosticsProfile": {
					"bootDiagnostics": {
						"enabled": true,
						"storageUri": "[concat('https://', parameters('storageUri'), '.blob.core.windows.net')]"
					}
				}
			}
		},
		{
			"type": "Microsoft.Compute/virtualMachines",
			"apiVersion": "2020-12-01",
			"name": "[concat(variables('linuxVMName'), copyIndex(2))]",
			"copy": {
				"count": 2,
				"name": "linuxVMcopy"
			},
			"location": "[parameters('location')]",
			"dependsOn": [
				"nicCopy1",
				"nicCopy2"
			],
			"properties": {
				"hardwareProfile": {
					"vmSize": "[parameters('vmSize')]"
				},
				"osProfile": {
					"computerName": "[concat(variables('linuxVMName'), copyIndex(2))]",
					"adminUsername": "[parameters('adminUsername')]",
					"adminPassword": "[parameters('adminPassword')]"
				},
				"storageProfile": {
					"imageReference": {
						"publisher": "OpenLogic",
						"offer": "CentOS",
						"sku": "7_9-gen2",
						"version": "latest"
					},
					"osDisk": {
						"createOption": "FromImage",
						"managedDisk": {
							"storageAccountType": "StandardSSD_LRS"
						}
					}
				},
				"networkProfile": {
					"networkInterfaces": [
						{
							"id": "[resourceId('Microsoft.Network/networkInterfaces', concat(variables('nicName'), copyIndex(add(variables('windowsVMCount'),2))))]"
						}
					]
				},
				"diagnosticsProfile": {
					"bootDiagnostics": {
						"enabled": true,
						"storageUri": "[concat('https://', parameters('storageUri'), '.blob.core.windows.net')]"
					}
				}
			}
		},
		{
			"type": "Microsoft.Compute/virtualMachines",
			"apiVersion": "2020-12-01",
			"name": "[concat(variables('linuxVMName'), copyIndex(4))]",
			"location": "[parameters('location')]",
			"dependsOn": [
				"nicCopy1",
				"nicCopy2"
			],
			"copy": {
				"count": "[sub(variables('linuxVMCount'), 3)]",
				"name": "linuxVMcopy2"
			},
			"properties": {
				"hardwareProfile": {
					"vmSize": "[parameters('vmSize')]"
				},
				"osProfile": {
					"computerName": "[concat(variables('linuxVMName'), copyIndex(4))]",
					"adminUsername": "[parameters('adminUsername')]",
					"adminPassword": "[parameters('adminPassword')]"
				},
				"storageProfile": {
					"imageReference": {
						"publisher": "RedHat",
						"offer": "rhel-raw",
						"sku": "8-raw",
						"version": "latest"
					},
					"osDisk": {
						"createOption": "FromImage",
						"managedDisk": {
							"storageAccountType": "StandardSSD_LRS"
						}
					}
				},
				"networkProfile": {
					"networkInterfaces": [
						{
							"id": "[resourceId('Microsoft.Network/networkInterfaces', concat(variables('nicName'), add(variables('windowsVMCount'), copyIndex(4))))]"
						}
					]
				},
				"diagnosticsProfile": {
					"bootDiagnostics": {
						"enabled": true,
						"storageUri": "[concat('https://', parameters('storageUri'), '.blob.core.windows.net')]"
					}
				}
			}
		},
		{
			// 👍🏿
			"type": "Microsoft.Compute/virtualMachines/runCommands",
			"apiVersion": "2021-11-01",
			"name": "[concat(variables('windowsVMName'), '1', '/injectRunCommand')]",
			"location": "[resourceGroup().location]",
			"dependsOn": [
				"[concat(resourceId('Microsoft.Compute/virtualMachines', variables('windowsVMName')),'1')]"
			],
			"properties": {
				"source": {
					"script": "Start-Process powershell -Verb runAs -ArgumentList {& \"$env:windir\\system32\\sysprep\\Sysprep.exe\" /generalize /reboot /oobe;}"
				},
				"timeoutInSeconds": 60
			}
		},
		{
			// 👍🏿
			"type": "Microsoft.Compute/virtualMachines/runCommands",
			"apiVersion": "2021-11-01",
			"name": "[concat(variables('windowsVMName'), '2', '/injectRunCommand')]",
			"location": "[resourceGroup().location]",
			"dependsOn": [
				"[concat(resourceId('Microsoft.Compute/virtualMachines', variables('windowsVMName')),'2')]"
			],
			"properties": {
				"source": {
					"script": "bcdedit /delete '{bootmgr}' /f; Restart-Computer -Force;"
				},
				"timeoutInSeconds": 60
			}
		},
		{
			// 👍🏿
			"type": "Microsoft.Compute/virtualMachines/runCommands",
			"apiVersion": "2021-11-01",
			"name": "[concat(variables('windowsVMName'), '3', '/injectRunCommand')]",
			"location": "[resourceGroup().location]",
			"dependsOn": [
				"[concat(resourceId('Microsoft.Compute/virtualMachines', variables('windowsVMName')),'3')]"
			],
			"properties": {
				"source": {
					"script": "Start-Process powershell -Verb runAs -ArgumentList {bcdedit /delete '{current}' /f; Restart-Computer -Force}"
				},
				"timeoutInSeconds": 60
			}
		},
		{
			// 👍🏿
			"type": "Microsoft.Compute/virtualMachines/runCommands",
			"apiVersion": "2021-11-01",
			"name": "[concat(variables('windowsVMName'), '4', '/injectRunCommand')]",
			"location": "[resourceGroup().location]",
			"dependsOn": [
				"[resourceId('Microsoft.Resources/deployments', 'ADDC')]"
			],
			"properties": {
				"source": {
					"script": "Start-Process powershell -Verb runAs -ArgumentList { Get-Partition -DriveLetter F | Set-Partition -NewDriveLetter Y; Restart-Computer -Force; }"
				},
				"timeoutInSeconds": 60
			}
		},
		{
			// 👍🏿
			"type": "Microsoft.Compute/virtualMachines/runCommands",
			"apiVersion": "2021-11-01",
			"name": "[concat(variables('windowsVMName'), '6', '/injectRunCommand')]",
			"location": "[resourceGroup().location]",
			"dependsOn": [
				"[concat(resourceId('Microsoft.Compute/virtualMachines', variables('windowsVMName')),'6')]"
			],
			"properties": {
				"source": {
					"script": "netsh advfirewall firewall set rule dir=in name=\"Remote Desktop - User Mode (TCP-In)\" new enable=no"

				},
				"timeoutInSeconds": 60
			}
		},
		{
			// 👍🏿
			"type": "Microsoft.Compute/virtualMachines/runCommands",
			"apiVersion": "2021-11-01",
			"name": "[concat(variables('windowsVMName'), '7', '/injectRunCommand')]",
			"location": "[resourceGroup().location]",
			"dependsOn": [
				"[concat(resourceId('Microsoft.Compute/virtualMachines', variables('windowsVMName')),'7')]"
			],
			"properties": {
				"source": {
					"script": "Start-Process powershell -Verb runAs -ArgumentList {Start-Sleep 60; Stop-Service -Name \"dhcp\" -Force; Set-Service -Name \"dhcp\" -StartupType Disabled; Restart-Computer -Force;}"
				},
				"timeoutInSeconds": 60
			}
		},
		{
			// 👍🏿
			"type": "Microsoft.Compute/virtualMachines/runCommands",
			"apiVersion": "2021-11-01",
			"name": "[concat(variables('windowsVMName'), '8', '/injectRunCommand')]",
			"location": "[resourceGroup().location]",
			"dependsOn": [
				"[concat(resourceId('Microsoft.Compute/virtualMachines', variables('windowsVMName')),'8')]"
			],
			"properties": {
				"source": {
					"script": "Start-Process powershell -Verb runAs -ArgumentList {bcdedit /set safeboot minimal; Restart-Computer -Force;}"
				},
				"timeoutInSeconds": 60
			}
		},
		{
			// 👍🏿
			"type": "Microsoft.Compute/virtualMachines/runCommands",
			"apiVersion": "2021-11-01",
			"name": "[concat(variables('windowsVMName'), '9', '/injectRunCommand')]",
			"location": "[resourceGroup().location]",
			"dependsOn": [
				"[concat(resourceId('Microsoft.Compute/virtualMachines', variables('windowsVMName')),'9')]"
			],
			"properties": {
				"source": {
					"script": "Get-NetFirewallrule -DisplayName \"Remote Desktop - User Mode (TCP-In)\" | Get-NetFirewallAddressFilter | Set-NetFirewallAddressFilter -RemoteAddress 192.168.1.10; bcdedit /ems '{current}' off; Restart-Computer -Force;"
				},
				"timeoutInSeconds": 60
			}
		},
		{
			// 👍🏿
			"type": "Microsoft.Compute/virtualMachines/runCommands",
			"apiVersion": "2021-11-01",
			"name": "[concat(variables('windowsVMName'), '10', '/injectRunCommand')]",
			"location": "[resourceGroup().location]",
			"dependsOn": [
				"[concat(resourceId('Microsoft.Compute/virtualMachines', variables('windowsVMName')),'10')]"
			],
			"properties": {
				"source": {
					"script": "Start-Process powershell -Verb runAs -ArgumentList {Set-ItemProperty -Path 'HKLM:\\SYSTEM\\CurrentControlSet\\Services\\TermService\\Parameters' -name 'ServiceDll' '%SystemRoot%\\System32\\rdp.dll' -Type ExpandString; Restart-Computer -Force}"
				},
				"timeoutInSeconds": 60
			}
		},
		{
			// 👍🏿
			"type": "Microsoft.Compute/virtualMachines/runCommands",
			"apiVersion": "2021-11-01",
			"name": "[concat(variables('windowsVMName'), '11', '/injectRunCommand')]",
			"location": "[resourceGroup().location]",
			"dependsOn": [
				"[concat(resourceId('Microsoft.Compute/virtualMachines', variables('windowsVMName')),'11')]"
			],
			"properties": {
				"source": {
					"script": "Start-Process powershell -Verb runAs -ArgumentList { cmd /c 'sc config rdagent start= disabled && sc stop rdagent && sc config WindowsAzureGuestAgent start= disabled && sc stop WindowsAzureGuestAgent && sc delete rdagent && sc delete WindowsAzureGuestAgent'; Get-Process -Name 'WaAppAgent.exe' | Stop-Process;Get-Process -Name 'WaSecAgentProv.exe' | Stop-Process;Get-Process -Name 'WindowsAzureGuestAgent.exe' | Stop-Process; Get-ChildItem 'C:\\WindowsAzure\\' -File -recurse | Sort-Object FullName -Descending | Remove-Item -recurse -force -confirm:$false;Get-ChildItem 'C:\\WindowsAzure\\*' -Directory -recurse | Sort-Object FullName -Descending | Remove-Item -recurse -force -confirm:$false; Remove-Item 'C:\\WindowsAzure\\' -recurse -force -confirm:$false; cmd /c \"del /f /s /q 'C:\\WindowsAzure\\'\"; Add-Type -AssemblyName System.Web; $RandPassw = [System.Web.Security.Membership]::GeneratePassword(8,2); net user (Get-LocalUser | Where-Object { $_.Enabled }).Name $RandPassw; Restart-Computer -Force}"
				},
				"timeoutInSeconds": 60
			}
		},
		{
			// 👍🏿
			"name": "[concat(variables('windowsVMName'), '12', '/CustomScriptExtension')]",
			"type": "Microsoft.Compute/virtualMachines/extensions",
			"location": "[resourceGroup().location]",
			"apiVersion": "2019-03-01",
			"dependsOn": [
				"[concat(resourceId('Microsoft.Compute/virtualMachines', variables('windowsVMName')),'12')]"
			],
			"properties": {
				"publisher": "Microsoft.Compute",
				"type": "CustomScriptExtension",
				"typeHandlerVersion": "1.9",
				"autoUpgradeMinorVersion": true,
				"protectedSettings": {
					"commandToExecute": "powershell -File machineKeysRDP.ps1",
					"fileUris": [
						"https://raw.githubusercontent.com/rjmccallumbigl/Azure-ARM-Templates/main/Scripts/machineKeysRDP.ps1"
					]
				}
			}
		},
		// {
		// ❌
		// 	"type": "Microsoft.Compute/virtualMachines/runCommands",
		// 	"apiVersion": "2021-11-01",
		// 	"name": "[concat(variables('windowsVMName'), '13', '/injectRunCommand')]",
		// 	"location": "[resourceGroup().location]",
		// 	"dependsOn": [
		// 		"[concat(resourceId('Microsoft.Compute/virtualMachines', variables('windowsVMName')),'13')]"
		// 	],
		// 	"properties": {
		// 		"source": {
		// 			"script": "Start-Process powershell -Verb runAs -ArgumentList {}"
		// 		},
		// 		"timeoutInSeconds": 60
		// 	}
		// },
		{
			// ❌
			"type": "Microsoft.Compute/virtualMachines/runCommands",
			"apiVersion": "2021-11-01",
			"name": "[concat(variables('windowsVMName'), '14', '/injectRunCommand')]",
			"location": "[resourceGroup().location]",
			"dependsOn": [
				"[concat(resourceId('Microsoft.Compute/virtualMachines', variables('windowsVMName')),'14')]"
			],
			"properties": {
				"source": {
					"script": "reg add \"HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\" /v Userinit /t REG_SZ /d BrokenUserInit.exe /f; Restart-Computer -Force;"
				},
				"timeoutInSeconds": 60
			}
		},
		{
			// ❌
			"type": "Microsoft.Compute/virtualMachines/runCommands",
			"apiVersion": "2021-11-01",
			"name": "[concat(variables('windowsVMName'), '15', '/injectRunCommand')]",
			"location": "[resourceGroup().location]",
			"dependsOn": [
				"[concat(resourceId('Microsoft.Compute/virtualMachines', variables('windowsVMName')),'15')]"
			],
			"properties": {
				"source": {
					"script": "New-Item -Path \"HKLM:\\Software\\Wow6432Node\\Microsoft\\Windows\\CurrentVersion\\Uninstall\" -Name \"Citrix\";Set-ItemProperty -Path \"HKLM:\\Software\\Wow6432Node\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\Citrix\" -Name \"DisplayName\" -Value \"Citrix\"; Set-ItemProperty -Path \"HKLM:\\Software\\Wow6432Node\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\Citrix\" -Name \"DisplayVersion\" -Value 2.00.4333; Set-ItemProperty -Path \"HKLM:\\Software\\Wow6432Node\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\Citrix\" -Name \"InstallDate\" -Value 20200210;Set-ItemProperty -Path \"HKLM:\\Software\\Wow6432Node\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\Citrix\" -Name \"Publisher\" -Value \"Citrix\";reg add \"HKLM\\SYSTEM\\CurrentControlSet\\control\\Terminal Server\\Winstations\\RDP-Tcp\" /v LoadableProtocol_Object /t REG_SZ /d \"RPM.CtxRdpProtocolManager\" /f; Restart-Computer -force;"
				},
				"timeoutInSeconds": 60
			}
		},
		{
			// 👍🏿
			"name": "[concat(variables('linuxVMName'), '1', '/injectRunCommand')]",
			"type": "Microsoft.Compute/virtualMachines/extensions",
			"location": "[resourceGroup().location]",
			"apiVersion": "2019-03-01",
			"dependsOn": [
				"[concat(resourceId('Microsoft.Compute/virtualMachines', variables('linuxVMName')),'1')]"
			],
			"properties": {
				"publisher": "Microsoft.Azure.Extensions",
				"type": "CustomScript",
				"typeHandlerVersion": "2.1",
				"autoUpgradeMinorVersion": true,
				"protectedSettings": {
					"commandToExecute": "sudo sh updateFstab.sh",
					"fileUris": [
						"https://raw.githubusercontent.com/rjmccallumbigl/Azure-ARM-Templates/main/Scripts/updateFstab.sh"
					]
				}
			}
		},
		{
			// 👍🏿
			"name": "[concat(variables('linuxVMName'), '2', '/injectRunCommand')]",
			"type": "Microsoft.Compute/virtualMachines/extensions",
			"location": "[resourceGroup().location]",
			"apiVersion": "2019-03-01",
			"dependsOn": [
				"[concat(resourceId('Microsoft.Compute/virtualMachines', variables('linuxVMName')),'2')]"
			],
			"properties": {
				"publisher": "Microsoft.Azure.Extensions",
				"type": "CustomScript",
				"typeHandlerVersion": "2.1",
				"autoUpgradeMinorVersion": true,
				"protectedSettings": {
					"commandToExecute": "sudo sh LinuxLab2.sh",
					"fileUris": [
						"https://raw.githubusercontent.com/rjmccallumbigl/Azure-ARM-Templates/main/Scripts/LinuxLab2.sh"
					]
				}
			}
		},
		{
			// 👍🏿
			"name": "[concat(variables('linuxVMName'), '3', '/injectRunCommand')]",
			"type": "Microsoft.Compute/virtualMachines/extensions",
			"location": "[resourceGroup().location]",
			"apiVersion": "2019-03-01",
			"dependsOn": [
				"[concat(resourceId('Microsoft.Compute/virtualMachines', variables('linuxVMName')),'3')]"
			],
			"properties": {
				"publisher": "Microsoft.Azure.Extensions",
				"type": "CustomScript",
				"typeHandlerVersion": "2.1",
				"autoUpgradeMinorVersion": true,
				"protectedSettings": {
					"commandToExecute": "sudo sh staticIP.sh",
					"fileUris": [
						"https://raw.githubusercontent.com/rjmccallumbigl/Azure-ARM-Templates/main/Scripts/staticIP.sh"
					]
				}
			}
		},
		{
			// 👍🏿
			"name": "[concat(variables('linuxVMName'), '4', '/injectRunCommand')]",
			"type": "Microsoft.Compute/virtualMachines/extensions",
			"location": "[resourceGroup().location]",
			"apiVersion": "2019-03-01",
			"dependsOn": [
				"[concat(resourceId('Microsoft.Compute/virtualMachines', variables('linuxVMName')),'4')]"
			],
			"properties": {
				"publisher": "Microsoft.Azure.Extensions",
				"type": "CustomScript",
				"typeHandlerVersion": "2.1",
				"autoUpgradeMinorVersion": true,
				"protectedSettings": {
					"commandToExecute": "[concat('sudo sh removeAgent.sh; openssl passwd 12 | passwd ', parameters('adminUsername'),' --stdin;')]",
					"fileUris": [
						"https://raw.githubusercontent.com/rjmccallumbigl/Azure-ARM-Templates/main/Scripts/removeAgent.sh"
					]
				}
			}
		},
		{
			// 👍🏿
			"name": "[concat(variables('linuxVMName'), '5', '/injectRunCommand')]",
			"type": "Microsoft.Compute/virtualMachines/extensions",
			"location": "[resourceGroup().location]",
			"apiVersion": "2019-03-01",
			"dependsOn": [
				"[concat(resourceId('Microsoft.Compute/virtualMachines', variables('linuxVMName')),'5')]"
			],
			"properties": {
				"publisher": "Microsoft.Azure.Extensions",
				"type": "CustomScript",
				"typeHandlerVersion": "2.1",
				"autoUpgradeMinorVersion": true,
				"protectedSettings": {
					"commandToExecute": "sudo sh stress.sh",
					"fileUris": [
						"https://raw.githubusercontent.com/rjmccallumbigl/Azure-ARM-Templates/main/Scripts/stress.sh"
					]
				}
			}
		},
		{
			// 👍🏿
			"name": "[concat(variables('linuxVMName'), '6', '/injectRunCommand')]",
			"type": "Microsoft.Compute/virtualMachines/extensions",
			"location": "[resourceGroup().location]",
			"apiVersion": "2019-03-01",
			"dependsOn": [
				"[concat(resourceId('Microsoft.Compute/virtualMachines', variables('linuxVMName')),'6')]"
			],
			"properties": {
				"publisher": "Microsoft.Azure.Extensions",
				"type": "CustomScript",
				"typeHandlerVersion": "2.1",
				"autoUpgradeMinorVersion": true,
				"protectedSettings": {
					"commandToExecute": "sudo sh fillUpDisk.sh",
					"fileUris": [
						"https://raw.githubusercontent.com/rjmccallumbigl/Azure-ARM-Templates/main/Scripts/fillUpDisk.sh"
					]
				}
			}
		},
		{
			// 👍🏿
			"name": "[concat(variables('linuxVMName'), '7', '/injectRunCommand')]",
			"type": "Microsoft.Compute/virtualMachines/extensions",
			"location": "[resourceGroup().location]",
			"apiVersion": "2019-03-01",
			"dependsOn": [
				"[concat(resourceId('Microsoft.Compute/virtualMachines', variables('linuxVMName')),'7')]"
			],
			"properties": {
				"publisher": "Microsoft.Azure.Extensions",
				"type": "CustomScript",
				"typeHandlerVersion": "2.1",
				"autoUpgradeMinorVersion": true,
				"protectedSettings": {
					"commandToExecute": "sudo sh updateKernel.sh",
					"fileUris": [
						"https://raw.githubusercontent.com/rjmccallumbigl/Azure-ARM-Templates/main/Scripts/updateKernel.sh"
					]
				}
			}
		}
	]
}
